name: Deploy Stardex

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

permissions:
  id-token: write # Required for AWS OIDC
  contents: read # Required to checkout repository
  pull-requests: write # Required for test results

env:
  AWS_REGION: us-east-1
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Frontend Tests
      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests
        working-directory: frontend
        run: |
          pnpm lint
          pnpm test
        continue-on-error: false

      # Backend Tests
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        working-directory: backend
        run: |
          python -m pytest
          python -m pylint app/
        continue-on-error: false

      # Infrastructure Tests
      - name: Install CDK dependencies
        working-directory: infrastructure
        run: pnpm install --frozen-lockfile

      - name: Run CDK tests
        working-directory: infrastructure
        run: |
          pnpm lint
          pnpm test
        continue-on-error: false

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    timeout-minutes: 45
    outputs:
      bucket_name: ${{ steps.get-outputs.outputs.bucket_name }}
      distribution_id: ${{ steps.get-outputs.outputs.distribution_id }}
      api_url: ${{ steps.get-outputs.outputs.api_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: infrastructure
        run: |
          pnpm install --frozen-lockfile
          pnpm install -g aws-cdk

      - name: Deploy DNS Stack
        working-directory: infrastructure
        id: dns-deploy
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            if pnpm run deploy:dns -- --require-approval never; then
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "DNS stack deployment failed after $max_attempts attempts"
              exit 1
            fi
            
            attempt=$((attempt + 1))
            echo "Waiting before retry..."
            sleep 30
          done

      - name: Deploy Storage Stack
        working-directory: infrastructure
        run: |
          pnpm run deploy:storage -- --require-approval never || {
            echo "Storage stack deployment failed"
            exit 1
          }

      - name: Deploy Backend Stack
        working-directory: infrastructure
        run: |
          chmod +x scripts/bundle-lambda.sh
          ./scripts/bundle-lambda.sh

          pnpm run deploy:backend -- --require-approval never || {
            echo "Backend stack deployment failed"
            exit 1
          }

      - name: Deploy Monitoring Stack
        working-directory: infrastructure
        run: |
          pnpm run deploy:monitoring -- --require-approval never || {
            echo "Monitoring stack deployment failed"
            exit 1
          }

  deploy-application:
    name: Deploy Application
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-infrastructure.outputs.api_url }}
        run: pnpm run build

      - name: Deploy frontend
        env:
          BUCKET_NAME: ${{ needs.deploy-infrastructure.outputs.bucket_name }}
          DISTRIBUTION_ID: ${{ needs.deploy-infrastructure.outputs.distribution_id }}
        run: |
          aws s3 sync frontend/out/ s3://$BUCKET_NAME/ --delete

          # Create CloudFront invalidation
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

  validate:
    name: Validate Deployment
    needs: [deploy-infrastructure, deploy-application]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    timeout-minutes: 10

    steps:
      - name: Wait for DNS propagation
        run: sleep 60

      - name: Verify deployment
        run: |
          curl -f https://stardex.bjornmelin.io || exit 1
          curl -f ${{ needs.deploy-infrastructure.outputs.api_url }}/health || exit 1

      - name: Notify on success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "Frontend: https://stardex.bjornmelin.io"
          echo "API: ${{ needs.deploy-infrastructure.outputs.api_url }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details."
